/*
 *
 * TOMS KEYMAP

# https://github.com/pandrr/blank-slate-zmk-config

 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

//#define TBLE_ORTHO   1
#define TBLE_MIT     1
//#define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define HYP_L 3
#define BLT_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { 
    quick_tap_ms = <150>; 
    tapping-term-ms = <200>; 
    require-prior-idle-ms = <125>;
    flavor = "balanced";
};
&mt { 
    quick_tap_ms = <150>; 
    tapping-term-ms = <200>; 
    require-prior-idle-ms = <125>;
    flavor = "balanced";
};

#define BT(n) BT_SEL n
#define HY(k) LG(LC(LA(LS(k))))  

/ {


    combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_CTL {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&sk LCTL>;
        };
        combo_GUI {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&sk LGUI>;
        };
        combo_ALT {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&sk LALT>;
        };
    };


    chosen {
        zmk,physical-layout =
            #ifdef TBLE_DUAL_2U
               &layout_ortho_4x12_2x2u;
            #elif defined(TBLE_MIT)
               &layout_ortho_4x12_1x2u;
            #else
               &layout_ortho_4x12_all1u;
            #endif
    };

    
    tap_dances {
    	shifty: shift_caps_word {
        	compatible = "zmk,behavior-tap-dance";
        	label = "TD_SHIFTY";
        	#binding-cells = <0>;
        	tapping-term-ms = <150>;
        	bindings = <&kp LSHFT>, <&caps_word>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <

            &lt HYP_L Q  &kp W   &kp F   &kp P        &kp B       &trans  &trans  &kp J       &kp L       &kp U       &kp Y      &kp BKSP
            &kp A        &kp S   &kp R   &kp T        &kp G       &trans  &trans  &kp M       &kp N       &kp E       &kp I      &kp O 
            &lt BLT_L Z  &kp X   &kp C   &mt LCTL D   &mt LALT V  &trans  &trans  &mt LALT K  &mt LCTL H  &kp COMMA   &kp DOT    &kp SLASH      
            &trans       &trans  &trans  &mt LSFT ESC  &mt LGUI RET    &trans   &lt NAV_L SPACE   &lt NUM_L F13  &trans &trans   &trans &trans

            >;
        };

        nav_layer {
            label = "nuv";
            bindings = <

            &kp ESC  &trans  &trans      &trans   &trans  &trans  &trans  &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp DEL  
            &trans   &trans  &kp S(TAB)  &kp TAB  &trans  &trans  &trans  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET   
            &trans   &trans  &trans      &trans   &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans   
            &trans   &trans  &trans      &trans   &trans  &trans  &trans  &trans     &trans    &trans    &trans        

            >;
        };


        //   Q   W   F   P   B          J   L   U   Y   :
        // 
        //   1   2   3   4   5  XX XX   6   7   8   9   0   
        //   ~   [   {   (   -  XX XX   +   )   }   ]   |   
        //   ??  `   '   "   _  XX XX   =   :   ;   .   \   
        // 
        num_layer {
            label = "Num";
            bindings = <

            &kp N1     &kp N2     &kp N3     &kp N4     &kp N5     &trans  &trans  &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     
            &kp TILDE  &kp LBKT   &kp LBRC   &kp LPAR   &kp MINUS  &trans  &trans  &kp PLUS   &kp RPAR   &kp RBRC   &kp RBKT   &kp PIPE    
            &trans     &kp GRAVE  &kp SQT    &kp DQT    &kp UNDER  &trans  &trans  &kp EQUAL  &kp COLON  &kp SEMI   &kp S(N8)  &kp BSLH
            &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans     &trans     
            >;
        };


        hyp_layer {
            label = "hyp";
            bindings = <
&trans    &kp HY(Q)      &kp HY(W)      &kp HY(F)       &kp HY(P)   &kp LG(GRAVE)  &trans  &trans   &trans        &kp HY(L)    &kp HY(SPACE)       &trans      
&trans    &kp HY(A)      &kp HY(S)      &kp HY(R)       &kp F16     &kp HY(G)      &trans  &trans   &trans        &kp HY(LEFT)   &kp HY(DOWN)     &kp HY(RIGHT)  
&trans    &kp HY(Z)      &kp HY(X)      &kp HY(C)       &kp HY(D)   &kp HY(V)      &trans  &trans   &trans        &trans      &trans  &trans
&trans    &trans  &trans  &trans &trans     &kp HY(SPACE)  &trans  &trans   &kp HY(LEFT)  &kp HY(DOWN)  &kp HY(RIGHT)

            >;
        };    




        bt_layer {
            label = "bt";
            bindings = <
&bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4) &trans   &trans  &trans  &trans  &trans  &trans   &bt BT_CLR
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5 &trans &trans     &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  
&trans  &kp F11    &kp F12    &trans     &trans     &trans     &trans  &trans  &trans  &trans  &bootloader   &studio_unlock
&trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans   &trans

            >;
        };


#         sym2_layer {
#             label = "sym2";
#             bindings = <
# &trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans   &trans
# &trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans   &trans
# &trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans   &trans
# &trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans   
#             >;
#         };



    };
};

